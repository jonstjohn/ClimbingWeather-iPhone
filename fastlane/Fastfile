# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.23.0"

default_platform :ios

platform :ios do
  #before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    #cocoapods
    
  #end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym(scheme: "climbingweather") # Build your app - more options available

    build_number = Time.now.strftime("%Y%m%d%H%M")
    increment_build_number(build_number: build_number)

    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    match(type: "appstore")
    # snapshot

    build_number = Time.now.strftime("%Y%m%d%H%M")
    increment_build_number(build_number: build_number)

    gym(scheme: "climbingweather") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end

  lane :build do

    build_number = Time.now.strftime("%Y%m%d%H%M")
    xcode_version = ENV["CW_XCODE_VERSION"]
    git_branch = ENV.key?("CW_GIT_BRANCH") ? ENV["CW_GIT_BRANCH"] : "master"
    
    # Ensure correct xcode version
    if xcode_version
      xcversion(version: xcode_version)
    end
    
    # Check for test mode
    
    
    # Clean local repo

    #ensure_git_branch(branch: git_branch)
    #ensure_git_status_clean
    #git_pull

    # Refresh provisioning profiles
    #match(app_identifier: ["com.climbingweather.cw"], type: "appstore", readonly: true)
    
    # Update build number
    
    #increment_build_number(build_number: build_number) # , xcodeproj: xcodeproj)

    # Commit version bump
    
    #commit_version_bump

    # Tag build
    
    #add_git_tag(tag: format("tags/%s", build_number))

    # Clear derived data
    
    # Build

    gym
    
    # Distribute
    
    pilot
  
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
